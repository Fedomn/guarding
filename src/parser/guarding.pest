start = _{ SOI ~ declarations* ~ EOI}

identifier = @{ (ASCII_ALPHA | ASCII_ALPHANUMERIC | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

declarations = {
  module_rule |
  package_rule |
  class_rule |
  file_rule |
  function_rule |
  layer_rule
}

class_rule = {
	"class" ~ ("(" ~ scope ~ ")")? ~ "::" ~ expression ~ should? ~ operation ~ assert ~ ";"?
}

package_rule = {
	"package"
}
module_rule = {
	"module"
}
file_rule = {
	"file"
}
layer_rule = {
	"layer"
}
function_rule = {
	"layer"
}

scope = {
    string |
    impl_scope |
    extend_scope |
    assignable_scope
}

assignable_scope = {
    "assignable" ~ string
}
extend_scope = {
    "extends" ~ string
}

impl_scope = {
    "implementation" ~ string
}

expression = {
    identifier ~ (dot ~ identifier )*
}

assert = {
   string |
   opening_paren~ string ~ closing_paren |
   int
}

operation = {
    "not" ~ operation |
    "!" ~ operation |
    "<=" |
    "<" |
    ">" |
    ">=" |
    "==" |
	"contains" |
	"endsWith" |
	"startsWith" |
	"resideIn" |
	"accessed" |
	"dependBy"
}

should = {
    "should"
}

double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}
backquoted_quoted_string  = @{ "`" ~ (!("`") ~ ANY)* ~ "`"}

string = @{
    double_quoted_string |
    single_quoted_string |
    backquoted_quoted_string
}

number = @{ '0'..'9'+ }
int = @{ number | "-" ~ "0"* ~ '1'..'9' ~ number? }

dot                 = { "." }
opening_paren       = { "(" }
closing_paren       = { ")" }

newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }


// todo: simplify code
// ~[\u0000-\u007F\uD800-\uDBFF]
// [\uD800-\uDBFF] [\uDC00-\uDFFF]
// Char = _{ "\u{0009}" | "\u{000A}" | "\u{000D}" |
//           '\u{0020}'..'\u{D7FF}' | '\u{E000}'..'\u{FFFD}' |
//           '\u{10000}'..'\u{10FFFF}' }
//
// S = _{ "\u{0020}" | "\u{0009}" | "\u{000D}" | "\u{000A}" }
// utf8 = { (!S ~ Char)* }
// identifier = { chars }
